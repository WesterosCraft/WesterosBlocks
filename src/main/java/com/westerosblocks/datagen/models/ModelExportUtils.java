package com.westerosblocks.datagen.models;

import com.google.gson.JsonObject;
import com.westerosblocks.WesterosBlocks;
import net.minecraft.block.Block;
import net.minecraft.data.client.*;
import net.minecraft.util.Identifier;

import java.util.Optional;

/**
 * Utility class for shared functionality across model export classes.
 * Provides common constants, model creation methods, and item model generation.
 */
public class ModelExportUtils {
    // Common texture keys used across different block types
    public static final String PARTICLE_KEY = "particle";
    public static final String TEXTURE_KEY = "texture";
    public static final String TEXTURE_KEY_1 = "1";

    /**
     * Creates a model with the specified parent and texture overrides.
     * 
     * @param generator The BlockStateModelGenerator to register the model with
     * @param block The block this model is for
     * @param parentModelPath The parent model path to inherit from
     * @param texturePath The texture path to override
     * @param variant The variant suffix for the model ID
     * @param textureKey The texture key to use (e.g., "texture", "1")
     * @return The created model Identifier
     */
    public static Identifier createModel(
            BlockStateModelGenerator generator, 
            Block block, 
            String parentModelPath, 
            String texturePath, 
            String variant, 
            String textureKey) {
        
        JsonObject modelJson = new JsonObject();
        
        modelJson.addProperty("parent", parentModelPath);
        modelJson.addProperty("credit", "Generated by WesterosBlocks");

        // Override the texture to use the dynamic texture path
        JsonObject textures = new JsonObject();
        textures.addProperty(textureKey, texturePath);
        textures.addProperty(PARTICLE_KEY, texturePath);
        modelJson.add("textures", textures);

        // Create a unique model ID for this block and variant
        String modelPath = "block/generated/" + block.getTranslationKey().replace("block.westerosblocks.", "") + "_" + variant;
        Identifier modelId = WesterosBlocks.id(modelPath);

        // Register the model
        generator.modelCollector.accept(modelId, () -> modelJson);

        return modelId;
    }

    /**
     * Creates a model with the default "texture" key.
     * 
     * @param generator The BlockStateModelGenerator to register the model with
     * @param block The block this model is for
     * @param parentModelPath The parent model path to inherit from
     * @param texturePath The texture path to override
     * @param variant The variant suffix for the model ID
     * @return The created model Identifier
     */
    public static Identifier createModel(
            BlockStateModelGenerator generator, 
            Block block, 
            String parentModelPath, 
            String texturePath, 
            String variant) {
        
        return createModel(generator, block, parentModelPath, texturePath, variant, TEXTURE_KEY);
    }

    /**
     * Creates a model with the "1" texture key (used by some block types).
     * 
     * @param generator The BlockStateModelGenerator to register the model with
     * @param block The block this model is for
     * @param parentModelPath The parent model path to inherit from
     * @param texturePath The texture path to override
     * @param variant The variant suffix for the model ID
     * @return The created model Identifier
     */
    public static Identifier createModelWithKey1(
            BlockStateModelGenerator generator, 
            Block block, 
            String parentModelPath, 
            String texturePath, 
            String variant) {
        
        return createModel(generator, block, parentModelPath, texturePath, variant, TEXTURE_KEY_1);
    }

    /**
     * Generates a simple item model that inherits from a block model.
     * 
     * @param generator The ItemModelGenerator to register the model with
     * @param block The block to create an item model for
     * @param variant The variant suffix for the block model to inherit from
     */
    public static void generateItemModel(ItemModelGenerator generator, Block block, String variant) {
        String modelPath = "block/generated/" + block.getTranslationKey().replace("block.westerosblocks.", "") + "_" + variant;
        Model model = new Model(
            Optional.of(WesterosBlocks.id(modelPath)),
            Optional.empty()
        );
        generator.register(block.asItem(), model);
    }

    /**
     * Generates a simple item model that inherits from a block model without variant suffix.
     * 
     * @param generator The ItemModelGenerator to register the model with
     * @param block The block to create an item model for
     */
    public static void generateItemModel(ItemModelGenerator generator, Block block) {
        String modelPath = "block/generated/" + block.getTranslationKey().replace("block.westerosblocks.", "");
        Model model = new Model(
            Optional.of(WesterosBlocks.id(modelPath)),
            Optional.empty()
        );
        generator.register(block.asItem(), model);
    }

    /**
     * Registers a block state with the generator using the provided variants.
     * 
     * @param generator The BlockStateModelGenerator to register with
     * @param block The block to create a state for
     * @param variants The BlockStateVariantMap containing all variants
     */
    public static void registerBlockState(BlockStateModelGenerator generator, Block block, BlockStateVariantMap variants) {
        generator.blockStateCollector.accept(
            VariantsBlockStateSupplier.create(block)
                .coordinate(variants)
        );
    }
} 