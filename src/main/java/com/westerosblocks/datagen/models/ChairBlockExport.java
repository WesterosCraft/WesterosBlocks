package com.westerosblocks.datagen.models;

import com.google.gson.JsonObject;
import com.westerosblocks.WesterosBlocks;
import com.westerosblocks.block.custom.WCChairBlock;
import net.minecraft.block.Block;
import net.minecraft.data.client.*;
import net.minecraft.util.Identifier;

import java.util.Optional;

public class ChairBlockExport {
    private static final String PARTICLE_KEY = "particle";
    private static final String TEXTURE_KEY = "texture";

    public static void generateBlockStateModels(BlockStateModelGenerator generator, Block block, String texturePath) {
        // Create different models for cardinal and diagonal directions
        Identifier cardinalModelId = createModel(generator, block, texturePath, "cardinal");
        Identifier diagonalModelId = createModel(generator, block, texturePath, "diagonal");

        // Create variants for each rotation (0-7 for 8 directions)
        // Cardinal directions (0, 2, 4, 6) use the base model with rotations
        // Diagonal directions (1, 3, 5, 7) use the 45-degree rotated model
        BlockStateVariantMap variants = BlockStateVariantMap.create(WCChairBlock.ROTATION)
            // Cardinal directions - use base model with Y rotations
            .register(0, BlockStateVariant.create()
                .put(VariantSettings.MODEL, cardinalModelId))
            .register(2, BlockStateVariant.create()
                .put(VariantSettings.MODEL, cardinalModelId)
                .put(VariantSettings.Y, VariantSettings.Rotation.R90))
            .register(4, BlockStateVariant.create()
                .put(VariantSettings.MODEL, cardinalModelId)
                .put(VariantSettings.Y, VariantSettings.Rotation.R180))
            .register(6, BlockStateVariant.create()
                .put(VariantSettings.MODEL, cardinalModelId)
                .put(VariantSettings.Y, VariantSettings.Rotation.R270))
            
            // Diagonal directions - use 45-degree rotated model with adjusted Y rotations
            // The diagonal model is already rotated 45Â°, so we need to adjust the Y rotations
            .register(1, BlockStateVariant.create()
                .put(VariantSettings.MODEL, diagonalModelId)
                .put(VariantSettings.Y, VariantSettings.Rotation.R90))
            .register(3, BlockStateVariant.create()
                .put(VariantSettings.MODEL, diagonalModelId)
                .put(VariantSettings.Y, VariantSettings.Rotation.R180))
            .register(5, BlockStateVariant.create()
                .put(VariantSettings.MODEL, diagonalModelId)
                .put(VariantSettings.Y, VariantSettings.Rotation.R270))
            .register(7, BlockStateVariant.create()
                .put(VariantSettings.MODEL, diagonalModelId));

        // Register the block state
        generator.blockStateCollector.accept(
            VariantsBlockStateSupplier.create(block)
                .coordinate(variants)
        );
    }

    private static Identifier createModel(BlockStateModelGenerator generator, Block block, String texturePath, String variant) {
        JsonObject modelJson = new JsonObject();
        
        // Use different parent models based on variant
        String parentModelPath = variant.equals("diagonal") 
            ? "westerosblocks:block/custom/chair/simple_chair_45"
            : "westerosblocks:block/custom/chair/simple_chair";
        
        modelJson.addProperty("parent", parentModelPath);
        modelJson.addProperty("credit", "Generated by WesterosBlocks");

        // Override the texture to use the dynamic texture path
        JsonObject textures = new JsonObject();
        textures.addProperty(TEXTURE_KEY, texturePath);
        textures.addProperty(PARTICLE_KEY, texturePath);
        modelJson.add("textures", textures);

        // Create a unique model ID for this block and variant
        String modelPath = "block/generated/" + block.getTranslationKey().replace("block.westerosblocks.", "") + "_" + variant;
        Identifier modelId = WesterosBlocks.id(modelPath);

        // Register the model
        generator.modelCollector.accept(modelId, () -> modelJson);

        return modelId;
    }

    public static void generateItemModels(ItemModelGenerator generator, Block block) {
        // Create a simple item model that inherits from the cardinal block model
        String modelPath = "block/generated/" + block.getTranslationKey().replace("block.westerosblocks.", "") + "_cardinal";
        Model model = new Model(
            Optional.of(WesterosBlocks.id(modelPath)),
            Optional.empty()
        );
        generator.register(block.asItem(), model);
    }
} 